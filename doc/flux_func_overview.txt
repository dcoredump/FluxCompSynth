// Channel based
	    void noteOn( byte Channel, byte Key, byte Velocity );
	    void noteOff( byte Channel, byte Key );
	    void controlChange( byte Channel, byte CtrlNr, byte Value );
	    void setControlValue( byte Channel, byte CtrlNr, word Value );
*   void programChange( byte Channel, byte Patch );
*   void programChange( byte Channel, byte Bank, byte Patch );
	    void setPatchBank( byte Channel, byte Bank );
	    void setPatchBank( byte Bank );
	    void polyAftertouch( byte Channel, byte Key, byte Value );
	    void channelAftertouch( byte Channel, byte Value );
	    void pitchBend( byte Channel, word Bend );
*   void setBendRange( byte Channel, byte Range );
	    void RPN_Control( byte Channel, byte rpnHi, byte rpnLo, byte Data );
	    void NRPN_Control( byte Channel, byte nrpnHi, byte nrpnLo, byte Data );
	    void dataEntry( byte Channel, byte Data );
*   void setChannelVolume( byte Channel, byte Level );
*   void allNotesOff( byte Channel );
    void setPartChannel( byte Part, byte Channel );
    void setPartMode( byte Part, boolean Drums );
    void setVoiceReserve( byte *CountTable );
    void assignCC1Controller( byte Channel, byte CtrlNr );
    void assignCC2Controller( byte Channel, byte CtrlNr );
*   void setReverbSend( byte Channel, byte Level );
*   void setChorusSend( byte Channel, byte Level );
    void setTranspose( byte Channel, byte SemiCtrl );
    void setTuning( byte Channel, byte CentsCtrl );
    void setScaleTuning( byte Channel, byte* TuningTable );
    void setDrumPitch( byte Channel, byte DrumNr, byte Semitone );
    void setDrumMix( byte Channel, byte DrumNr, byte Level, byte Pan, byte Reverb, byte Chorus);
	    void setVelocitySlope( byte Channel, byte Slope );
	    void setVelocityOffset( byte Channel, byte Offset );
	    void setVibrato( byte Channel, byte Rate, byte Depth, byte Delay );
	    void setVibratoRate( byte Channel, byte Rate );
	    void setVibratoDepth( byte Channel, byte Depth );
	    void setVibratoDelay( byte Channel, byte Delay );
	    void setTvFilter( byte Channel, byte CutoffFreq, byte Resonance );
	    void setTvfCutoff( byte Channel, byte CutoffFreq );
	    void setTvfResonance( byte Channel, byte Resonance );
	    void setEnvelope( byte Channel, byte Attack, byte Decay, byte Release );
	    void setEnvAttack( byte Channel, byte Attack );
	    void setEnvDecay( byte Channel, byte Decay );
	    void setEnvRelease( byte Channel, byte Release );
*   void GM_ReverbSend( byte Channel, byte Level );
*   void GM_ChorusSend( byte Channel, byte Level );
*   void GM_Volume( byte Channel, byte Level );
*   void GM_Pan( byte Channel, byte Pan );

//    void setLfoRate( byte CtrlVal );
//    void setModPitchDepth( byte Controller, byte Channel, byte SemiCtrl );
//    void setModTvfCutoff( byte Controller, byte Channel, byte CtrlVal );
//    void setModAmplitude( byte Controller, byte Channel, byte CtrlVal );
//    void setModLfoPitchDepth( byte Controller, byte Channel, byte CtrlVal );
//    void setModLfoTvfDepth( byte Controller, byte Channel, byte CtrlVal );
//    void setModLfoTvaDepth( byte Controller, byte Channel, byte CtrlVal );

// Global
//    void midiReset();
*   void GM_Reset();
*   void GS_Reset();
*   void setMasterVolume( byte Level );
*   void GS_MasterVolume( byte Level );
*   void GS_MasterPan( byte Pan );
*   void setMasterTranspose( byte Semitones );
	    void setMasterTuning( word CtrlValue );
	    void setEzMasterTuning( short DeciCent );
*   void SetReverbLevel( byte MasterLevel );
*   void setReverb( byte Program, byte Time, byte Feedback, byte Character = 4 );
   	    void setReverbProgram( byte Program );
	    void setReverbTime( byte Time );
	    void setReverbFeedback( byte Feedback );
	    void setReverbCharacter( byte Character );
*   void setChorusLevel( byte MasterLevel );
*   void setChorus( byte Program, byte Delay, byte Feedback, byte Rate, byte Depth);
	    void setChorusProgram( byte Program );
	    void setChorusDelay( byte Delay );
	    void setChorusFeedback( byte Feedback );
	    void setChorusRate( byte Rate );
	    void setChorusDepth( byte Depth );
	    void enableEffects( byte Flags );
*   void restartEffects();
*   void enableReverb( boolean On );
+   void enableSurround( boolean On );
+   void setEqualizerMode( byte revMode );
*   void setClippingMode( byte Mode );
*   void setOutputLevel( byte Level ); 
+   void setEqualizer( byte BandNr, byte Freq, byte Gain );
	    void setEqFrequency( byte BandNr, byte Frequency );
	    void setEqGain( byte BandNr, byte Gain );
+   void setSurroundVolume( byte Level );
+   void setSurroundDelay( byte Time );
    	    void surroundMonoIn( boolean Mono );
(+) void postprocGeneralMidi( boolean On );  /* Surround + EQ */
(*) void postprocReverbChorus( boolean On ); /* Surround + EQ */
